version: "3.8"

services:
  backend:
    restart: always
    image: rent_golem/backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend/rent_golem:/code/
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env

#  yagna:
#    build:
#      context: ./yagna
#      dockerfile: Dockerfile
#    command: /bin/bash -c 'yagna service run && sleep 5 && yagna payment init --sender'
#    volumes:
#      - yagna_data:/root/.local/share/yagna
#    env_file: .env

  load-balancer:
    image: haproxy
    ports:
      - "8100:8100"
      - "8404:8404"  # monitoring
    volumes:
      - ./haproxy:/usr/local/etc/haproxy

  celery-beat:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A rent_golem beat -l INFO --pidfile=
    volumes:
      - ./backend/rent_golem:/code/
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env

  celery-worker:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A rent_golem worker -l INFO -Q default, --pidfile=
    volumes:
      - ./backend/rent_golem:/code/
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env

#  celery-golem:
#    restart: always
#    build:
#      context: ./backend
#      dockerfile: celery-golem.Dockerfile
#    command: celery -A rent_golem worker -Q clusters -l INFO --pidfile=
#    volumes:
#      - ./backend/rent_golem:/code/
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    env_file: .env

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    env_file: .env
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 3s
      timeout: 3s
      retries: 5

  redis:
    image: redis:7
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 3s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
  yagna_data:
